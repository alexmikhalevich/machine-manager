name: Docker
on: [push]
env:
  ROM_VERSION: v0.8.0
  KERNEL_VERSION: v0.9.0
  ROOTFS_VERSION: v0.8.0
  KERNEL_FILE: linux-5.5.19-ctsi-3.bin
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup docker image tags
        id: docker_image_tags
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-manager
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Build docker image
        id: docker_build_test
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          push: false
          load: true
          tags: ${{ steps.docker_image_tags.outputs.tags }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.CI_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3 python3-pip
          pip3 install -r requirements.txt

      - name: Generate grpc python code
        run: |
          ls -lah
          ./generate-cartesi-gprc

      - name: Create test files directory
        run: |
          mkdir test-files

      - name: Set current git organization env var
        id: git_org
        run: echo "::set-output name=current_organization::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 1)"

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ steps.git_org.outputs.current_organization }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ steps.git_org.outputs.current_organization }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: ${{ env.KERNEL_FILE }}
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ steps.git_org.outputs.current_organization }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Move images to test-files directory
        run: |
          mv rom.bin rootfs.ext2 test-files/
          mv ${{ env.KERNEL_FILE }} test-files/linux.bin

      - name: Set default tag name
        id: docker_image_default_tag
        run: echo ::set-output name=name::$(echo "${{ steps.docker_image_tags.outputs.tags }}" | head -n 1 | xargs)

      - name: Run Tests
        run: |
          docker run --rm --name cartesi_mm_container -p 50051:50051 -v $(pwd)/test-files:/root/host -t ${{ steps.docker_image_default_tag.outputs.name }} & timeout 20 bash -c 'while ! nc -q0 127.0.0.1 50051 < /dev/null > /dev/null 2>&1; do sleep 1; done' && ./test-client -c && echo "tests succeeded" && docker kill cartesi_mm_container
          docker run --rm --name cartesi_mm_container -p 50051:50051 -v $(pwd)/test-files:/root/host -t ${{ steps.docker_image_default_tag.outputs.name }} /opt/cartesi/bin/machine-manager -a 0.0.0.0 -d & timeout 20 bash -c 'while ! nc -q0 127.0.0.1 50051 < /dev/null > /dev/null 2>&1; do sleep 1; done' && ./test-client -c && echo "tests succeeded" && docker kill cartesi_mm_container

      - name: Clean up
        run: |
          docker run --rm --name cartesi_mm_container -v $(pwd):/root/host -t ${{ steps.docker_image_default_tag.outputs.name }} bash -c 'rm -rf /root/host/test-files'

      - name: Build and push docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          push: true
          tags: ${{ steps.docker_image_tags.outputs.tags }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.CI_TOKEN }}
